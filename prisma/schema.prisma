generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// 用户角色
model Role {
  id        String          @id @default(cuid())
  name      String // 角色名称
  perm      String // 权限字符
  route     String? // 默认路由
  status    AvailableStatus @default(normal)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  Account   Account[]
}

model Account {
  id        String   @id @default(cuid())
  username  String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  roleId    String
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Customer {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String?           @db.VarChar(255)
  email            String?           @db.VarChar(255)
  phone            String?           @db.VarChar(255)
  weixin           String?           @db.VarChar(255)
  weixinId         String?           @db.VarChar(255)
  xianyu           String?           @db.VarChar(255)
  qq               String?           @db.VarChar(255)
  qqNum            String?           @db.VarChar(255)
  firstMessageTime DateTime?         @db.DateTime(0)
  accountId        String
  CustomerPayment  CustomerPayment[]

  @@map("customer")
}

model CustomerOrder {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  firstMessageTime DateTime? @db.DateTime(0)
  orderTime        DateTime? @db.DateTime(0)
  deliveryTime     DateTime? @db.DateTime(0)
  from             String    @default("闲鱼")
  status           Int       @default(0)
  industry         String?   @db.VarChar(150)
  industryDetail   String?   @db.VarChar(150)
  content          String?   @db.Text
  detail           String?   @db.LongText
  extra            String?   @db.LongText
  repo             String?   @db.Text
  customerId       String?
  accountId        String?
  projectId        String?

  @@map("customer_order")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model CustomerPayment {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  amount     Decimal   @db.Decimal(10, 2)
  payTime    DateTime  @db.DateTime(0)
  payMethod  String    @default("闲鱼")
  extra      String?   @db.Text
  orderId    String?   @db.VarChar(36)
  customerId String?   @db.VarChar(36)
  accountId  String?   @db.VarChar(36)
  projectId  String?   @db.VarChar(36)
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_payment")
}

model CustomerProject {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String    @db.VarChar(255)
  description String?   @db.LongText
  begin       DateTime? @db.DateTime(0)
  end         DateTime? @db.DateTime(0)
  content     String?   @db.LongText
  extra       String?   @db.LongText
  customerId  String?   @db.VarChar(36)
  accountId   String?   @db.VarChar(36)

  @@map("customer_project")
}

model CustomerRemark {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String   @db.VarChar(255)
  content    String   @db.LongText
  customerId String?  @db.VarChar(36)
  accountId  String?  @db.VarChar(36)
  projectId  String?  @db.VarChar(36)

  @@map("customer_remark")
}

/// 系统字典
model SysDict {
  id        Int             @id @default(autoincrement())
  category  SysDictCategory @default(select)
  name      String
  type      String          @unique
  remark    String?
  status    AvailableStatus @default(normal) /// 当前状态
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

/// 系统字典数据
model SysDictData {
  id        Int             @id @default(autoincrement())
  sort      Float?
  label     String
  value     String
  type      String
  remark    String?
  extra     Json? /// 扩展信息，对于有些数据，可以配置支持的扩展
  status    AvailableStatus @default(normal) /// 当前状态
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

/// 可用状态
enum AvailableStatus {
  normal /// 正常
  forbidden /// 禁用
}

enum SysDictCategory {
  radio
  select
}
